// def recordDeployment(owner, repo, ref, status, environmentURL, environment = "preview", description = "Deploy to preview environment") {
//   withCredentials([usernamePassword(credentialsId: 'github-app-infra', usernameVariable: 'GITHUB_APP', passwordVariable: 'GH_TOKEN')]) {
//     def json = writeJSON(returnText: true, json: [
//         "ref": ref,
//         "environment": environment,
//         "description": description,
//         "required_contexts": [],
//         "auto_merge": false,
//         "auto_inactive": false,
//         "transient_environment": environment != "production",
//     ])
//     def id = readJSON(text: sh(script: "gh api repos/${owner}/${repo}/deployments  -X POST --input - << EOF\n${json}\nEOF", returnStdout: true).trim()).id
//     if (id == ''){
//       error('Unable to create deployment')
//     }
//     json = writeJSON(returnText: true, json: [
//         "state": status,
//         "environment": environment,
//         "description": description,
//         "log_url": "${BUILD_URL}console",
//         "environment_url": environmentURL,
//     ])
//     sh("gh api repos/${owner}/${repo}/deployments/${id}/statuses  -X POST --input - << EOF\n${json}\nEOF")
//   }
// }

pipeline {
  environment {
    NODE_ENV = "production"
  }

  stages {
    stage('Build Production') {
      when {
        branch "main"
      }
      environment {
        GATSBY_MATOMO_SITE_ID = "2"
        GATSBY_MATOMO_SITE_URL = "https://jenkins-matomo.do.g4v.dev"
      }
      steps {
        sh 'npm run build'
      }
    }

    stage('Lint and Test') {
      environment {
        NODE_ENV = "development"
      }
      steps {
        sh '''
          npm run lint
        '''
      }
    }

    stage('Deploy') {
      when {
        branch "main"
      }
      environment {
        NETLIFY_AUTH_TOKEN = credentials('netlify-auth-token')
      }
      post {
        success {
          recordDeployment('jenkins-infra', 'stories', env.GIT_COMMIT, 'success', "https://jenkins-is-the-way.netlify.app", "production")
        }
        failure {
          recordDeployment('jenkins-infra', 'stories', env.GIT_COMMIT, 'failure', "https://jenkins-is-the-way.netlify.app", "production")
        }
      }
      steps {
        sh('curl -qsL https://github.com/halkeye/netlify-golang-deploy/releases/download/v0.1.5/netlify-golang-deploy_0.1.5_Linux_x86_64.tar.gz | tar xvzf - netlify-golang-deploy; chmod +x netlify-golang-deploy; mv netlify-golang-deploy netlify-deploy')
        sh('./netlify-deploy --draft=false --siteName "jenkins-is-the-way" --title "Deploy" -d ./public')
      }
    }

    stage('Deploy to preview site') {
      when {
        changeRequest target: 'main'
      }
      environment {
        NETLIFY_AUTH_TOKEN = credentials('netlify-auth-token')
      }
      post {
        success {
          recordDeployment('jenkins-infra', 'stories', pullRequest.head, 'success', "https://deploy-preview-${CHANGE_ID}--jenkins-is-the-way.netlify.app")
        }
        failure {
          recordDeployment('jenkins-infra', 'stories', pullRequest.head, 'failure', "https://deploy-preview-${CHANGE_ID}--jenkins-is-the-way.netlify.app")
        }
      }
      steps {
        sh('curl -qsL https://github.com/halkeye/netlify-golang-deploy/releases/download/v0.1.5/netlify-golang-deploy_0.1.5_Linux_x86_64.tar.gz | tar xvzf - netlify-golang-deploy; chmod +x netlify-golang-deploy; mv netlify-golang-deploy netlify-deploy')
        sh('./netlify-deploy --draft=true --siteName "jenkins-is-the-way" --title "Preview deploy for ${CHANGE_ID}" --alias "deploy-preview-${CHANGE_ID}" -d ./public')
      }
    }
  }
}
